generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  phone        String?  @unique
  email        String?  @unique
  passwordHash String?
  googleId     String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  fullName  String?
  nickname  String?
  birthdate DateTime?
  avatarUrl String?
  regionId  String?
  cityId    String?

  jobs          Job[]
  notifications Notification[]
  wallet        Wallet?

  region            Region?            @relation("UserRegion", fields: [regionId], references: [id], onDelete: SetNull)
  city              City?              @relation("UserCity", fields: [cityId], references: [id], onDelete: SetNull)
  services          Service[]
  chatsAsUserA      Chat[]             @relation("UserAChats")
  chatsAsUserB      Chat[]             @relation("UserBChats")
  chatMessages      ChatMessage[]
  purchasedContacts PurchasedContact[]

  @@index([regionId])
  @@index([cityId])
  @@index([phone])
  @@index([email])
  @@index([createdAt])
}

model Chat {
  id        String   @id @default(uuid())
  userAId   String
  userBId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  userA    User          @relation("UserAChats", fields: [userAId], references: [id])
  userB    User          @relation("UserBChats", fields: [userBId], references: [id])
  messages ChatMessage[]

  @@unique([userAId, userBId])
}

model ChatMessage {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())

  chat   Chat @relation(fields: [chatId], references: [id])
  sender User @relation(fields: [senderId], references: [id])
}

model Region {
  id   String @id @default(uuid())
  name String @unique
  lat  Float
  lng  Float

  jobs     Job[]     @relation("JobRegion")
  users    User[]    @relation("UserRegion")
  services Service[] @relation("ServiceRegion")
  City     City[]
}

model City {
  id       String @id @default(uuid())
  name     String
  regionId String

  region   Region    @relation(fields: [regionId], references: [id])
  users    User[]    @relation("UserCity")
  services Service[] @relation("ServiceCity")
  jobs     Job[]     @relation("JobCity")

  @@unique([regionId, name])
}

model Service {
  id            String    @id @default(uuid())
  title         String
  description   String
  price         Float
  promotedUntil DateTime?
  createdAt     DateTime  @default(now())

  images String[] // Массив URL картинок
  videos String[] // Массив URL видео

  userId        String
  regionId      String?
  cityId        String?
  categoryId    String
  subcategoryId String

  user        User        @relation(fields: [userId], references: [id])
  region      Region?     @relation("ServiceRegion", fields: [regionId], references: [id], onDelete: SetNull)
  city        City?       @relation("ServiceCity", fields: [cityId], references: [id], onDelete: SetNull)
  category    Category    @relation(fields: [categoryId], references: [id])
  subcategory Subcategory @relation(fields: [subcategoryId], references: [id])

  reviews           Review[]
  purchasedContacts PurchasedContact[]

  @@index([createdAt])
  @@index([regionId])
  @@index([cityId])
  @@index([userId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([promotedUntil])
}

model PurchasedContact {
  id        String   @id @default(uuid())
  userId    String
  serviceId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  services    Service[]
  subcategory Subcategory[]
}

model Subcategory {
  id         String   @id @default(uuid())
  name       String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  services Service[]
}

model Wallet {
  id      String @id @default(uuid())
  balance Float  @default(0.0)
  userId  String @unique

  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id        String          @id @default(uuid())
  amount    Float
  type      TransactionType
  createdAt DateTime        @default(now())
  walletId  String

  wallet Wallet @relation(fields: [walletId], references: [id])
}

enum TransactionType {
  TOP_UP
  SPEND
  REFUND
  BONUS
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  serviceId String

  service Service @relation(fields: [serviceId], references: [id])

  @@index([createdAt])
}

model Job {
  id            String    @id @default(uuid())
  title         String
  description   String
  price         Float     @default(0)
  address       String?
  createdAt     DateTime  @default(now())
  promotedUntil DateTime?

  images String[] // Массив URL картинок
  videos String[] // Массив URL видео

  userId   String
  regionId String?
  cityId   String?

  user   User    @relation(fields: [userId], references: [id])
  region Region? @relation("JobRegion", fields: [regionId], references: [id], onDelete: SetNull)
  city   City?   @relation("JobCity", fields: [cityId], references: [id], onDelete: SetNull)

  @@index([createdAt])
  @@index([regionId])
  @@index([cityId])
  @@index([userId])
  @@index([promotedUntil])
}

enum NotificationType {
  SYSTEM
  CHAT
  REVIEW
  PROMO
}

model Notification {
  id        String           @id @default(uuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}
