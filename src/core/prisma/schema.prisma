generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Language {
  en
  ru
  kk
  uz
}

model Admin {
  id           String    @id @default(uuid())
  login        String    @unique
  passwordHash String    
}

model User {
  id           String    @id @default(uuid())
  phone        String?   @unique
  email        String?   @unique
  passwordHash String?
  googleId     String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastLoginAt  DateTime?
  lastSeenAt   DateTime?
  isDeleted    Boolean   @default(false)

  pushToken    String?

  fullName  String?
  nickname  String?
  birthdate DateTime?
  avatarUrl String?
  regionId  String?
  cityId    String?

  jobs          Job[]
  notifications Notification[]
  wallet        Wallet?

  region            Region?            @relation("UserRegion", fields: [regionId], references: [id], onDelete: SetNull)
  city              City?              @relation("UserCity", fields: [cityId], references: [id], onDelete: SetNull)
  services          Service[]
  chatsAsUserA      Chat[]             @relation("UserAChats")
  chatsAsUserB      Chat[]             @relation("UserBChats")
  chatMessages      ChatMessage[]
  purchasedContacts PurchasedContact[]
  Chat              Chat[]

  @@index([regionId])
  @@index([cityId])
  @@index([phone])
  @@index([email])
  @@index([createdAt])
}

model Chat {
  id              String   @id @default(uuid())
  userAId         String
  userBId         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt()
  isBlocked       Boolean  @default(false)
  blockedByUserId String?
  unreadCount     Int      @default(0)

  userA     User          @relation("UserAChats", fields: [userAId], references: [id])
  userB     User          @relation("UserBChats", fields: [userBId], references: [id])
  blockedBy User?         @relation(fields: [blockedByUserId], references: [id])
  messages  ChatMessage[]

  @@unique([userAId, userBId])
  @@index([userAId, userBId])
  @@index([userBId, userAId])
}

model ChatMessage {
  id        BigInt   @id @default(autoincrement())
  chatId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())

  chat   Chat @relation(fields: [chatId], references: [id])
  sender User @relation(fields: [senderId], references: [id])

  @@index([chatId, createdAt])
}

model Region {
  id  String @id @default(uuid())
  lat Float
  lng Float

  translations RegionTranslation[]

  jobs     Job[]     @relation("JobRegion")
  users    User[]    @relation("UserRegion")
  services Service[] @relation("ServiceRegion")
  cities     City[]
}

model RegionTranslation {
  id       String   @id @default(uuid())
  regionId String
  language Language // "en", "ru", "kz", "uz"
  name     String

  region Region @relation(fields: [regionId], references: [id])

  @@unique([regionId, language])
}

model City {
  id       String @id @default(uuid())
  lat      Float
  lng      Float
  regionId String

  region       Region            @relation(fields: [regionId], references: [id])
  translations CityTranslation[]

  users    User[]    @relation("UserCity")
  services Service[] @relation("ServiceCity")
  jobs     Job[]     @relation("JobCity")
}

model CityTranslation {
  id       String   @id @default(uuid())
  cityId   String
  language Language // "en", "ru", "kz", "uz"
  name     String

  city City @relation(fields: [cityId], references: [id])

  @@unique([cityId, language])
}

model Service {
  id            BigInt    @id @default(autoincrement())
  title         String
  description   String
  price         Float
  promotedUntil DateTime?
  createdAt     DateTime  @default(now())
  isDeleted     Boolean   @default(false)

  images String[] // Массив URL картинок
  videos String[] // Массив URL видео
  expiresAt     DateTime

  userId        String
  regionId      String?
  cityId        String?
  categoryId    String
  subcategoryId String

  user        User        @relation(fields: [userId], references: [id])
  region      Region?     @relation("ServiceRegion", fields: [regionId], references: [id], onDelete: SetNull)
  city        City?       @relation("ServiceCity", fields: [cityId], references: [id], onDelete: SetNull)
  category    Category    @relation(fields: [categoryId], references: [id])
  subcategory Subcategory @relation(fields: [subcategoryId], references: [id])

  reviews           Review[]
  purchasedContacts PurchasedContact[]

  @@index([createdAt])
  @@index([regionId])
  @@index([cityId])
  @@index([userId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([promotedUntil])
  @@index([expiresAt])
}

model Job {
  id            BigInt    @id @default(autoincrement())
  title         String
  description   String
  price         Float     @default(0)
  address       String?
  createdAt     DateTime  @default(now())
  promotedUntil DateTime?
  isDeleted     Boolean   @default(false)

  images String[] // Массив URL картинок
  videos String[] // Массив URL видео
  expiresAt     DateTime

  userId   String
  regionId String?
  cityId   String?

  user   User    @relation(fields: [userId], references: [id])
  region Region? @relation("JobRegion", fields: [regionId], references: [id], onDelete: SetNull)
  city   City?   @relation("JobCity", fields: [cityId], references: [id], onDelete: SetNull)

  @@index([createdAt])
  @@index([regionId])
  @@index([cityId])
  @@index([userId])
  @@index([promotedUntil])
  @@index([expiresAt])
}

model PurchasedContact {
  id        BigInt   @id @default(autoincrement())
  userId    String
  serviceId BigInt
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  services            Service[]
  subcategory         Subcategory[]
  CategoryTranslation CategoryTranslation[]
}

model CategoryTranslation {
  id         String   @id @default(uuid())
  categoryId String
  language   Language // "en", "ru", "kz", "uz"
  name       String

  category Category @relation(fields: [categoryId], references: [id])

  @@unique([categoryId, language])
}

model Subcategory {
  id         String   @id @default(uuid())
  name       String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  services               Service[]
  SubcategoryTranslation SubcategoryTranslation[]
}

model SubcategoryTranslation {
  id            String   @id @default(uuid())
  subcategoryId String
  language      Language // "en", "ru", "kz", "uz"
  name          String

  subcategory Subcategory @relation(fields: [subcategoryId], references: [id])

  @@unique([subcategoryId, language])
}

model Wallet {
  id      String @id @default(uuid())
  balance Float  @default(0.0)
  userId  String @unique

  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id        BigInt          @id @default(autoincrement())
  amount    Float
  type      TransactionType
  createdAt DateTime        @default(now())
  walletId  String

  wallet Wallet @relation(fields: [walletId], references: [id])
}

enum TransactionType {
  TOP_UP
  SPEND
  REFUND
  BONUS
}

model Review {
  id        BigInt   @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  serviceId BigInt

  service Service @relation(fields: [serviceId], references: [id])

  @@index([createdAt])
}

enum NotificationType {
  SYSTEM
  CHAT
  REVIEW
  PROMO
}

model Notification {
  id        BigInt           @id @default(autoincrement())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Tariff {
  id          Int    @id @default(autoincrement())
  name        String
  price       Int
  promoDays   Int
  extraDays   Int
  order       Int    @default(0)
}
