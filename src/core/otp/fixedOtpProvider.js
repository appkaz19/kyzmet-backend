// fixedOtpProvider.js - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å Firebase
import { sendOTP, generateOTP, validateKZPhone } from './firebase.js';

// –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π OTP
const FIXED_OTP = '0000';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ OTP –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è MVP)
const otpStorage = new Map();

export async function sendOtp(phone) {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
    const validPhone = validateKZPhone(phone);
    if (!validPhone) {
      console.error(`‚ùå [OTP] Invalid KZ phone format: ${phone}`);
      return false;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OTP
    const otp = process.env.NODE_ENV === 'production' ? generateOTP() : FIXED_OTP;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º OTP –≤ –ø–∞–º—è—Ç–∏ —Å TTL (5 –º–∏–Ω—É—Ç)
    otpStorage.set(validPhone, {
      otp,
      expires: Date.now() + 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
    });

    console.log(`üì§ [OTP] Sending OTP ${otp} to ${validPhone}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS —á–µ—Ä–µ–∑ Firebase
    const result = await sendOTP(validPhone, otp);
    
    if (result.success) {
      console.log(`‚úÖ [OTP] Successfully sent to ${validPhone}`);
      return true;
    } else {
      console.error(`‚ùå [OTP] Failed to send to ${validPhone}:`, result.error);
      return false;
    }
    
  } catch (error) {
    console.error(`üî• [OTP] Error sending to ${phone}:`, error);
    return false;
  }
}

export async function verifyOtp(phone, otp) {
  try {
    const validPhone = validateKZPhone(phone);
    if (!validPhone) {
      console.log(`‚ùå [OTP] Invalid phone format for verification: ${phone}`);
      return false;
    }

    // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º 0000
    if (process.env.NODE_ENV !== 'production' && otp === FIXED_OTP) {
      console.log(`‚úÖ [OTP] Fixed OTP verified for ${validPhone}`);
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º OTP –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const stored = otpStorage.get(validPhone);
    if (!stored) {
      console.log(`‚ùå [OTP] No OTP found for ${validPhone}`);
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (Date.now() > stored.expires) {
      console.log(`‚è∞ [OTP] Expired OTP for ${validPhone}`);
      otpStorage.delete(validPhone);
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º –∫–æ–¥
    if (stored.otp === otp) {
      console.log(`‚úÖ [OTP] Valid OTP verified for ${validPhone}`);
      otpStorage.delete(validPhone); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      return true;
    } else {
      console.log(`‚ùå [OTP] Invalid OTP for ${validPhone}. Expected: ${stored.otp}, Got: ${otp}`);
      return false;
    }

  } catch (error) {
    console.error(`üî• [OTP] Error verifying for ${phone}:`, error);
    return false;
  }
}

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö OTP (–∑–∞–ø—É—Å–∫–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
export function cleanupExpiredOtp() {
  const now = Date.now();
  for (const [phone, data] of otpStorage.entries()) {
    if (now > data.expires) {
      otpStorage.delete(phone);
      console.log(`üßπ [OTP] Cleaned expired OTP for ${phone}`);
    }
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(cleanupExpiredOtp, 10 * 60 * 1000);
