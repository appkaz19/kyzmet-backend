openapi: 3.0.0
info:
  title: Kyzmet API
  version: 1.0.0
  description: Полная документация, собранная из модулей
servers:
  - url: http://localhost:6969/api
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    adminBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Регистрация нового пользователя
      description: Создаёт пользователя по номеру телефона и паролю без отправки OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                password:
                  type: string
              required:
                - phone
                - password
      responses:
        "200":
          description: Пользователь создан
        "400":
          description: Ошибка данных
        "500":
          description: Ошибка сервера
  /auth/login:
    post:
      tags:
        - auth
      summary: Логин пользователя
      description: Вход по номеру телефона и паролю
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                password:
                  type: string
              required:
                - phone
                - password
      responses:
        "200":
          description: Успешный вход
        "400":
          description: Неверные данные
        "500":
          description: Ошибка сервера
  /auth/attach-google:
    post:
      tags:
        - auth
      summary: Привязка Google-аккаунта
      description: Привязывает Firebase Google ID к текущему авторизованному пользователю
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firebaseGoogleId:
                  type: string
              required:
                - firebaseGoogleId
      responses:
        "200":
          description: Аккаунт успешно привязан
        "401":
          description: Требуется авторизация
        "500":
          description: Ошибка сервера
  /auth/reset-password:
    post:
      tags:
        - auth
      summary: Сброс пароля
      description: Сброс пароля по номеру телефона
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                newPassword:
                  type: string
              required:
                - phone
                - newPassword
      responses:
        "200":
          description: Пароль успешно изменен
        "400":
          description: Пользователь не найден
        "500":
          description: Ошибка сервера
  /auth/admin-login:
    post:
      tags:
        - auth
      summary: Логин администратора
      description: Вход администратора по номеру телефона и паролю
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                password:
                  type: string
              required:
                - login
                - password
      responses:
        "200":
          description: Успешный вход администратора
        "400":
          description: Неверные данные администратора
        "500":
          description: Ошибка сервера
  /categories:
    get:
      tags:
        - categories
      summary: Получить список всех категорий
      description: Возвращает список категорий с учетом выбранного языка
      parameters:
        - name: lang
          in: query
          schema:
            type: string
            enum:
              - en
              - ru
              - kk
              - uz
            default: en
      responses:
        "200":
          description: Успешный ответ со списком категорий
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    translations:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
        "500":
          description: Ошибка сервера
    post:
      tags:
        - categories
      summary: Создание новой категории
      description: Создаёт новую категорию с переводами (только для администраторов)
      security:
        - adminBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                translations:
                  type: array
                  items:
                    type: object
                    properties:
                      language:
                        type: string
                        enum:
                          - en
                          - ru
                          - kk
                          - uz
                      name:
                        type: string
              required:
                - translations
      responses:
        "200":
          description: Категория успешно создана
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
  /categories/{id}:
    patch:
      tags:
        - categories
      summary: Обновление существующей категории
      description: Обновляет переводы существующей категории (только для администраторов)
      security:
        - adminBearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                translations:
                  type: array
                  items:
                    type: object
                    properties:
                      language:
                        type: string
                        enum:
                          - en
                          - ru
                          - kk
                          - uz
                      name:
                        type: string
              required:
                - translations
      responses:
        "200":
          description: Категория успешно обновлена
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
    delete:
      tags:
        - categories
      summary: Удаление категории
      description: Удаляет категорию и все её переводы (только для администраторов)
      security:
        - adminBearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Категория успешно удалена
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
  /chats/start:
    post:
      tags:
        - chats
      summary: Начать чат
      description: Начинает новый чат с другим пользователем
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targetUserId:
                  type: string
              required:
                - targetUserId
      responses:
        "200":
          description: Чат создан или найден
        "400":
          description: Ошибка запроса
        "500":
          description: Ошибка сервера
  /chats:
    get:
      tags:
        - chats
      summary: Получить список чатов
      description: Возвращает список всех чатов пользователя
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Список чатов
        "401":
          description: Не авторизован
        "500":
          description: Ошибка сервера
  /chats/{chatId}/messages:
    get:
      tags:
        - chats
      summary: Получить сообщения чата
      description: Возвращает все сообщения внутри выбранного чата
      security:
        - BearerAuth: []
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Сообщения чата
        "400":
          description: Ошибка запроса
        "500":
          description: Ошибка сервера
    post:
      tags:
        - chats
      summary: Отправить сообщение в чат
      description: Отправляет новое сообщение в чат
      security:
        - BearerAuth: []
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
      responses:
        "200":
          description: Сообщение отправлено
        "400":
          description: Ошибка отправки
        "500":
          description: Ошибка сервера
  /favorites/services:
    get:
      tags:
        - favorites
      summary: Получить избранные услуги
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Список избранных услуг
    post:
      tags:
        - favorites
      summary: Добавить услугу в избранное
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Услуга добавлена в избранное
    delete:
      tags:
        - favorites
      summary: Удалить услугу из избранного
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Услуга удалена из избранного
  /favorites/jobs:
    get:
      tags:
        - favorites
      summary: Получить избранные задания
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Список избранных заданий
    post:
      tags:
        - favorites
      summary: Добавить задание в избранное
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Задание добавлено в избранное
    delete:
      tags:
        - favorites
      summary: Удалить задание из избранного
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Задание удалено из избранного
  /jobs:
    get:
      tags:
        - jobs
      summary: Получить список заданий
      description: Возвращает все активные задания (Job)
      parameters:
        - name: regionId
          in: query
          schema:
            type: string
        - name: cityId
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
        - name: price
          in: query
          schema:
            type: number
      responses:
        "200":
          description: Список заданий
        "500":
          description: Ошибка сервера
    post:
      tags:
        - jobs
      summary: Создать задание
      description: Создает новое задание
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                price:
                  type: number
                images:
                  type: array
                  items:
                    type: string
                regionId:
                  type: string
                cityId:
                  type: string
                address:
                  type: string
                allowChat:
                  type: boolean
                allowPhone:
                  type: boolean
              required:
                - title
                - description
                - price
                - regionId
                - cityId
      responses:
        "201":
          description: Задание создано
        "400":
          description: Ошибка данных
        "500":
          description: Ошибка сервера
  /jobs/{id}:
    get:
      tags:
        - jobs
      summary: Получить задание по ID
      description: Возвращает детальную информацию о задании по его ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Информация о задании получена
        "404":
          description: Задание не найдено
        "500":
          description: Ошибка сервера
  /jobs/{id}/promote:
    post:
      tags:
        - jobs
      summary: Поднять задание в топ
      description: Применить тариф продвижения задания
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tariffId:
                  type: integer
              required:
                - tariffId
      responses:
        "200":
          description: Задание продвинуто
        "400":
          description: Ошибка данных или недостаточно средств
        "403":
          description: Нет прав на продвижение задания
        "500":
          description: Ошибка сервера
  /jobs/{id}/contact:
    post:
      tags:
        - jobs
      summary: Купить контакт нанимателя
      description: Открывает контактную информацию нанимателя за монеты
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Контакт получен
        "400":
          description: Недостаточно средств
        "404":
          description: Задание не найдено
        "500":
          description: Ошибка сервера
  /jobs/my:
    get:
      tags:
        - jobs
      summary: Получить мои объявления
      description: Возвращает список объявлений текущего пользователя
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Список моих объявлений
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
  /location/regions:
    get:
      tags:
        - location
      summary: Получить список всех регионов и городов
      parameters:
        - name: lang
          in: query
          schema:
            type: string
            enum:
              - en
              - ru
              - kk
              - uz
            default: en
      responses:
        "200":
          description: Список регионов успешно получен
        "500":
          description: Ошибка сервера
  /location/regions/{regionId}/cities:
    get:
      tags:
        - location
      summary: Получить список городов по региону
      parameters:
        - name: regionId
          in: path
          required: true
          schema:
            type: string
        - name: lang
          in: query
          schema:
            type: string
            enum:
              - en
              - ru
              - kk
              - uz
            default: en
      responses:
        "200":
          description: Список городов успешно получен
        "500":
          description: Ошибка сервера
  /notifications:
    get:
      tags:
        - notifications
      summary: Получить список уведомлений
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Список уведомлений получен
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
  /notifications/unread/count:
    get:
      tags:
        - notifications
      summary: Получить количество непрочитанных уведомлений
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Количество непрочитанных уведомлений
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
  /notifications/{id}/read:
    patch:
      tags:
        - notifications
      summary: Пометить уведомление как прочитанное
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Уведомление помечено как прочитанное
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
  /notifications/read-all:
    patch:
      tags:
        - notifications
      summary: Пометить все уведомления как прочитанные
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Все уведомления помечены как прочитанные
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
  /purchased:
    get:
      tags:
        - purchased
      summary: Получить купленные контакты
      description: Возвращает контакты услуг и объявлений, приобретенных пользователем
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Список купленных контактов
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
  /purchased/tariffs:
    get:
      tags:
        - purchased
      summary: Получить тарифы продвижения
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Список тарифов
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
    post:
      tags:
        - purchased
      summary: Создать тариф
      security:
        - adminBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: integer
                promoDays:
                  type: integer
                extraDays:
                  type: integer
                order:
                  type: integer
              required:
                - name
                - price
      responses:
        "200":
          description: Тариф создан
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
  /purchased/tariffs/{id}:
    patch:
      tags:
        - purchased
      summary: Обновить тариф
      security:
        - adminBearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: integer
                promoDays:
                  type: integer
                extraDays:
                  type: integer
                order:
                  type: integer
      responses:
        "200":
          description: Тариф обновлен
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
    delete:
      tags:
        - purchased
      summary: Удалить тариф
      security:
        - adminBearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Тариф удален
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
  /reviews:
    post:
      tags:
        - reviews
      summary: Оставить отзыв на услугу
      description: Клиент оставляет отзыв на услугу
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                serviceId:
                  type: string
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
              required:
                - serviceId
                - rating
      responses:
        "200":
          description: Отзыв успешно оставлен
        "400":
          description: Ошибка данных
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
    get:
      tags:
        - reviews
      summary: Получить отзывы по услуге
      description: Возвращает список отзывов для конкретной услуги
      parameters:
        - name: serviceId
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Список отзывов получен
        "400":
          description: Не указан serviceId
        "500":
          description: Ошибка сервера
  paths:
    /api/search:
      get:
        tags:
          - Search
        summary: Global search
        description: Search across services, jobs, and categories
        parameters:
          - in: query
            name: q
            required: true
            schema:
              type: string
              minLength: 2
            description: Search query (minimum 2 characters)
            example: массаж
          - in: query
            name: type
            schema:
              type: string
              enum:
                - all
                - services
                - jobs
                - categories
              default: all
            description: Type of results to return
          - in: query
            name: limit
            schema:
              type: integer
              minimum: 1
              maximum: 50
              default: 5
            description: Maximum results per type
          - in: query
            name: regionId
            schema:
              type: string
              format: uuid
            description: Filter by region ID
          - in: query
            name: cityId
            schema:
              type: string
              format: uuid
            description: Filter by city ID
        responses:
          "200":
            description: Search results
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    query:
                      type: string
                      description: The search query
                    type:
                      type: string
                      description: Type of search performed
                    results:
                      type: object
                      properties:
                        services:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              title:
                                type: string
                              description:
                                type: string
                              price:
                                type: number
                              images:
                                type: array
                                items:
                                  type: string
                              rating:
                                type: number
                              reviewCount:
                                type: integer
                              providerName:
                                type: string
                              category:
                                type: object
                              subcategory:
                                type: object
                              region:
                                type: object
                              city:
                                type: object
                              promotedUntil:
                                type: string
                                format: date-time
                              createdAt:
                                type: string
                                format: date-time
                        jobs:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              title:
                                type: string
                              description:
                                type: string
                              price:
                                type: number
                              images:
                                type: array
                                items:
                                  type: string
                              authorName:
                                type: string
                              region:
                                type: object
                              city:
                                type: object
                              allowChat:
                                type: boolean
                              allowPhone:
                                type: boolean
                              promotedUntil:
                                type: string
                                format: date-time
                              createdAt:
                                type: string
                                format: date-time
                        categories:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              name:
                                type: string
                              CategoryTranslation:
                                type: array
                              subcategory:
                                type: array
                        subcategories:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              name:
                                type: string
                              categoryId:
                                type: string
                              SubcategoryTranslation:
                                type: array
                              category:
                                type: object
                    totalCounts:
                      type: object
                      properties:
                        services:
                          type: integer
                        jobs:
                          type: integer
                        categories:
                          type: integer
                        subcategories:
                          type: integer
                    hasMore:
                      type: boolean
                      description: Indicates if there are more results than returned
                example:
                  query: массаж
                  type: all
                  results:
                    services:
                      - id: 123e4567-e89b-12d3-a456-426614174000
                        title: Профессиональный массаж
                        description: Классический и лечебный массаж
                        price: 5000
                        rating: 4.8
                        reviewCount: 15
                        providerName: Иван Иванов
                    jobs:
                      - id: 223e4567-e89b-12d3-a456-426614174000
                        title: Ищу массажиста
                        description: Нужен массажист на дом
                        price: 3000
                        authorName: Анна Петрова
                    categories:
                      - id: 323e4567-e89b-12d3-a456-426614174000
                        name: massage
                        CategoryTranslation:
                          - nameRu: Массаж
                            nameKk: Массаж
                  totalCounts:
                    services: 23
                    jobs: 5
                    categories: 1
                    subcategories: 3
                  hasMore: true
          "400":
            description: Invalid search query
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                example:
                  error: Search query must be at least 2 characters
    /api/search/suggestions:
      get:
        tags:
          - Search
        summary: Get search suggestions
        description: Get autocomplete suggestions based on partial query
        parameters:
          - in: query
            name: q
            required: true
            schema:
              type: string
              minLength: 1
            description: Partial search query
            example: мас
          - in: query
            name: limit
            schema:
              type: integer
              minimum: 1
              maximum: 20
              default: 10
            description: Maximum number of suggestions
        responses:
          "200":
            description: Search suggestions
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    suggestions:
                      type: array
                      items:
                        type: string
                example:
                  suggestions:
                    - массаж
                    - массажист
                    - массаж спины
                    - массаж лица
                    - мастер маникюра
  tags:
    - name: Search
      description: Global search functionality
  /services:
    post:
      tags:
        - services
      summary: Создать услугу
      description: Создает новую услугу
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                price:
                  type: number
                images:
                  type: array
                  items:
                    type: string
                regionId:
                  type: string
                cityId:
                  type: string
                categoryId:
                  type: string
                subcategoryId:
                  type: string
              required:
                - title
                - description
                - price
                - regionId
                - cityId
                - categoryId
                - subcategoryId
      responses:
        "201":
          description: Услуга создана
        "400":
          description: Ошибка данных
        "500":
          description: Ошибка сервера
    get:
      tags:
        - services
      summary: Получить список услуг
      description: Получает список услуг с возможностью фильтрации по региону, городу,
        категории, подкатегории, поиску и цене
      parameters:
        - name: regionId
          in: query
          schema:
            type: string
        - name: cityId
          in: query
          schema:
            type: string
        - name: categoryId
          in: query
          schema:
            type: string
        - name: subcategoryId
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
        - name: price
          in: query
          schema:
            type: number
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: Список услуг получен
        "500":
          description: Ошибка сервера
  /services/{id}/promote:
    post:
      tags:
        - services
      summary: Поднять услугу в топ
      description: Применить тариф продвижения
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tariffId:
                  type: integer
              required:
                - tariffId
      responses:
        "200":
          description: Услуга продвинута
        "400":
          description: Ошибка данных
        "500":
          description: Ошибка сервера
  /services/{id}/contact:
    post:
      tags:
        - services
      summary: Купить контакт провайдера
      description: Открывает контактную информацию провайдера за монеты
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Контакт получен
        "400":
          description: Ошибка
        "500":
          description: Ошибка сервера
  /services/my:
    get:
      tags:
        - services
      summary: Получить мои услуги
      description: Возвращает список услуг текущего пользователя
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Список моих услуг
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
  /subcategories/by-category/{categoryId}:
    get:
      tags:
        - subcategories
      summary: Получить подкатегории по ID категории
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
        - name: lang
          in: query
          schema:
            type: string
            enum:
              - en
              - ru
              - kk
              - uz
            default: en
      responses:
        "200":
          description: Список подкатегорий успешно получен
        "500":
          description: Ошибка сервера
  /subcategories:
    post:
      tags:
        - subcategories
      summary: Создание новой подкатегории
      security:
        - adminBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categoryId:
                  type: string
                translations:
                  type: array
                  items:
                    type: object
                    properties:
                      language:
                        type: string
                        enum:
                          - en
                          - ru
                          - kk
                          - uz
                      name:
                        type: string
              required:
                - categoryId
                - translations
      responses:
        "200":
          description: Подкатегория создана
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
  /subcategories/{id}:
    patch:
      tags:
        - subcategories
      summary: Обновление подкатегории
      security:
        - adminBearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                translations:
                  type: array
                  items:
                    type: object
                    properties:
                      language:
                        type: string
                        enum:
                          - en
                          - ru
                          - kk
                          - uz
                      name:
                        type: string
              required:
                - translations
      responses:
        "200":
          description: Подкатегория обновлена
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
    delete:
      tags:
        - subcategories
      summary: Удаление подкатегории
      security:
        - adminBearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Подкатегория удалена
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
  /users/me:
    get:
      tags:
        - users
      summary: Получить свой профиль
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Успешно получен профиль
        "401":
          description: Неавторизованный доступ
        "404":
          description: Пользователь не найден
        "500":
          description: Ошибка сервера
    patch:
      tags:
        - users
      summary: Обновить свой профиль
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                phone:
                  type: string
                fullName:
                  type: string
                nickname:
                  type: string
                birthdate:
                  type: string
                  format: date
                regionId:
                  type: string
                cityId:
                  type: string
                avatarUrl:
                  type: string
      responses:
        "200":
          description: Профиль обновлен
        "400":
          description: Неверные поля
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
  /users/{id}:
    get:
      tags:
        - users
      summary: Получить профиль другого пользователя по ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Успешно получен профиль пользователя
        "401":
          description: Неавторизованный доступ
        "404":
          description: Пользователь не найден
        "500":
          description: Ошибка сервера
  /users/push-token:
    post:
      tags:
        - users
      summary: Сохранить FCM токен пользователя
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pushToken:
                  type: string
              required:
                - pushToken
      responses:
        "200":
          description: Токен сохранен
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
  /wallet:
    get:
      tags:
        - wallet
      summary: Получить кошелек текущего пользователя
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Успешно получен кошелек
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
  /wallet/top-up:
    post:
      tags:
        - wallet
      summary: Пополнение кошелька
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
              required:
                - amount
      responses:
        "200":
          description: Успешно пополнено
        "400":
          description: Неверная сумма
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
  /wallet/spend:
    post:
      tags:
        - wallet
      summary: Потратить монеты из кошелька
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
              required:
                - amount
      responses:
        "200":
          description: Успешно потрачено
        "400":
          description: Недостаточно средств или неверная сумма
        "401":
          description: Неавторизованный доступ
        "500":
          description: Ошибка сервера
